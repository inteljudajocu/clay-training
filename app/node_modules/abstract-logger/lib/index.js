(function() {
  var AbstractLogger, defineProperty, format, isArray, isNumber, isObject, isString, logLevels,
    __slice = [].slice;

  isObject = require('util-ex/lib/is/type/object');

  isString = require('util-ex/lib/is/type/string');

  isNumber = require('util-ex/lib/is/type/number');

  isArray = require('util-ex/lib/is/type/array');

  format = require('util-ex/lib/format');

  defineProperty = require('util-ex/lib/defineProperty');

  logLevels = require('./log-levels');

  module.exports = AbstractLogger = (function() {
    function AbstractLogger(aName, aOptions) {
      if (isObject(aName)) {
        aOptions = aName;
        aName = aOptions.name;
      }
      if (aName) {
        this.name = aName;
      }
      if (isObject(aOptions)) {
        if (aOptions.newLine && aOptions.newLine.length) {
          this.NEWLINE = aOptions.newLine;
        }
        if (aOptions.levels != null) {
          this.levels = aOptions.levels;
        }
        if (aOptions.level != null) {
          this.level = aOptions.level;
        }
        if (aOptions.enabled === false) {
          this.enabled = aOptions.enabled;
        }
      }
    }

    AbstractLogger.prototype.NEWLINE = '\n';

    (function() {
      var id, k, _results;
      _results = [];
      for (k in logLevels) {
        id = logLevels[k];
        if (id < 0) {
          continue;
        }
        _results.push(AbstractLogger.prototype[k.toLowerCase()] = (function(aLevelId) {
          return function() {
            var aContext, arg2, args;
            aContext = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
            arg2 = args[0];
            if (isString(aContext) && isObject(arg2) && !isArray(arg2)) {
              arg2.level = aLevelId;
              if (this.inLevelContext(arg2)) {
                arg2.message = aContext;
                this.writeln(this.formatter.apply(this, args));
              }
            } else if (isObject(aContext) && isString(aContext.message)) {
              aContext.level = aLevelId;
              if (this.inLevelContext(aContext)) {
                this.writeln(this.formatter.apply(this, arguments));
              }
            } else if (this.inLevel(aLevelId)) {
              this.writeln.apply(this, arguments);
            }
            return this;
          };
        })(id));
      }
      return _results;
    })();

    AbstractLogger.prototype.levels = logLevels;

    defineProperty(AbstractLogger.prototype, '_level', logLevels.ERROR);

    defineProperty(AbstractLogger.prototype, 'level', void 0, {
      get: function() {
        return this.levelId2Str(this._level);
      },
      set: function(value) {
        if (isString(value)) {
          this._level = this.levelStr2Id(value);
        } else if (isNumber(value)) {
          this._level = value;
        }
      }
    });


    /* !pragma coverage-skip-next */

    AbstractLogger.prototype._write = function() {
      throw Error('NOT IMPL');
    };

    AbstractLogger.prototype.levelId2Str = function(aId) {
      var i, result, vLevelStr, _ref;
      _ref = this.levels;
      for (vLevelStr in _ref) {
        i = _ref[vLevelStr];
        if (i === aId) {
          result = vLevelStr;
          break;
        }
      }
      return result;
    };

    AbstractLogger.prototype.levelStr2Id = function(aStr) {
      return this.levels[aStr.toUpperCase()];
    };

    AbstractLogger.prototype.formatter = function() {
      var aContext, args, end, msg, start, v;
      aContext = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      msg = aContext.message;
      end = -1;
      start = msg.indexOf('${');
      if ((aContext.name == null) && (this.name != null)) {
        aContext.name = this.name;
      }
      while (start !== -1 && end < msg.length) {
        end = msg.indexOf('}', start);
        if (end === -1) {
          end = msg.length;
        }
        v = msg.slice(start + 2, end).trim();
        v = aContext[v];
        if (v != null) {
          v = v.toString();
          msg = msg.slice(0, start) + v + msg.slice(end + 1);
          end = start + v.length;
        }
        start = msg.indexOf('${', ++end);
      }
      if (args.length) {
        args.unshift(msg);
        msg = format.apply(null, args);
      }
      return msg;
    };

    AbstractLogger.prototype.inLevel = function(aLevel) {
      var result;
      if (!isNumber(aLevel)) {
        aLevel = this.levelStr2Id(aLevel);
      }
      result = isNumber(aLevel) && aLevel <= this._level;
      return result;
    };

    AbstractLogger.prototype.inLevelContext = function(aContext) {
      var result, vLevel;
      vLevel = aContext.level;
      result = true;
      if (vLevel != null) {
        result = this.inLevel(vLevel);
        if (result && isNumber(vLevel)) {
          aContext.level = this.levelId2Str(vLevel);
        }
      }
      return result;
    };

    AbstractLogger.prototype.log = function() {
      var aContext, arg2, args;
      aContext = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      arg2 = args[0];
      if (isString(aContext) && isObject(arg2) && !isArray(arg2)) {
        if (this.inLevelContext(arg2)) {
          arg2.message = aContext;
          this.writeln(this.formatter.apply(this, args));
        }
      } else if (isObject(aContext) && isString(aContext.message)) {
        if (this.inLevelContext(aContext)) {
          this.writeln(this.formatter.apply(this, arguments));
        }
      } else {
        this.writeln.apply(this, arguments);
      }
      return this;
    };

    AbstractLogger.prototype.write = function() {
      var vStr;
      if (this.enabled !== false) {
        vStr = arguments.length ? format.apply(null, arguments) : this.NEWLINE;
        this._write(vStr);
      }
      return this;
    };

    AbstractLogger.prototype.writeln = function() {
      return this.write.apply(this, arguments).write();
    };

    AbstractLogger.prototype._inspect = function() {
      var result;
      return result = this.name ? '"' + this.name + '"' : '';
    };

    AbstractLogger.prototype.inspect = function() {
      var result, vAttrs;
      result = this.Class || this.constructor;
      result = result.name;
      vAttrs = this._inspect();
      if (vAttrs) {
        result += ' ' + vAttrs;
      }
      return '<' + result + '>';
    };

    AbstractLogger.prototype.toObject = function() {
      return {
        level: this.level,
        enabled: this.enabled !== false
      };
    };

    AbstractLogger.prototype.toJSON = function() {
      return this.toObject();
    };

    return AbstractLogger;

  })();

}).call(this);

//# sourceMappingURL=index.js.map
