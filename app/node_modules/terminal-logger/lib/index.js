(function() {
  var Logger, Table, TerminalLogger, colors, createObject, defineProperty, format, getKeys, getPrototypeOf, inherits, isArray, isObject, isString, textColor,
    __slice = [].slice;

  inherits = require('inherits-ex/lib/inherits');

  createObject = require('inherits-ex/lib/createObjectWith');

  getPrototypeOf = require('inherits-ex/lib/getPrototypeOf');

  format = require('util-ex/lib/format');

  isArray = require('util-ex/lib/is/type/array');

  isObject = require('util-ex/lib/is/type/object');

  isString = require('util-ex/lib/is/type/string');

  defineProperty = require('util-ex/lib/defineProperty');

  Table = require('cli-table');

  colors = require('colors/safe');

  Logger = require('abstract-logger');

  getKeys = Object.keys;

  textColor = function(aColors, aText) {
    if (isString(aColors)) {
      aColors = [aColors];
    }
    if (isArray(aColors)) {
      aColors.forEach(function(color) {
        return aText = colors[color](aText);
      });
    }
    return aText;
  };

  module.exports = TerminalLogger = (function() {
    var noBorderTable, noPaddingTable, pad, stColors, stLevels;

    inherits(TerminalLogger, Logger);

    function TerminalLogger(aName, aOptions) {
      if (!(this instanceof TerminalLogger)) {
        return createObject(TerminalLogger, arguments);
      }
      TerminalLogger.__super__.constructor.apply(this, arguments);
      if (isObject(aName)) {
        aOptions = aName;
      }
      if (isObject(aOptions)) {
        if (aOptions.colors) {
          this.colors = aOptions.colors;
        }
        if (aOptions.statusLevels) {
          this.statusLevels = aOptions.statusLevels;
        }
      }
      if (this.colors == null) {
        this.colors = stColors;
      }
    }

    TerminalLogger.prototype.step = '  ';

    TerminalLogger.prototype.padding = ' ';

    pad = function(status, max) {
      var delta;
      if (max == null) {
        max = 'identical'.length;
      }
      delta = max - status.length;
      if (delta) {
        return new Array(delta + 1).join(' ') + status;
      } else {
        return status;
      }
    };

    TerminalLogger.prototype.noBorderTable = noBorderTable = {
      'top': '',
      'top-mid': '',
      'top-left': '',
      'top-right': '',
      'bottom': '',
      'bottom-mid': '',
      'bottom-left': '',
      'bottom-right': '',
      'left': '',
      'left-mid': '',
      'mid': '',
      'mid-mid': '',
      'right': '',
      'right-mid': '',
      'middle': ' '
    };

    TerminalLogger.prototype.noPaddingTable = noPaddingTable = {
      'padding-left': 0,
      'padding-right': 0
    };

    stColors = {
      skip: 'magenta',
      force: 'yellow',
      create: 'green',
      invoke: 'bold',
      conflict: 'red',
      identical: 'cyan',
      ok: 'green',
      emergency: ['red', 'bold'],
      alert: 'red',
      critical: 'red',
      error: 'red',
      warning: 'yellow',
      notice: 'gray',
      info: 'gray',
      debug: 'blue',
      trace: 'blue',
      '✔': 'green',
      '✗': 'red',
      name: 'blue'
    };

    TerminalLogger.prototype.statusLevels = stLevels = {
      skip: 'warning',
      force: 'warning',
      create: 'notice',
      invoke: 'notice',
      conflict: 'error',
      identical: 'error',
      ok: 'notice',
      '✔': 'notice',
      '✗': 'error'
    };

    TerminalLogger.prototype._colorProp = function(aObject, aName, aDefaultValue) {
      var s;
      s = aObject[aName];
      if (s != null) {
        aObject[aName] = textColor(this.colors[s] || this.colors[aName] || aDefaultValue, s);
      }
    };

    TerminalLogger.prototype.formatter = function() {
      var aContext, args;
      aContext = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
      this._colorProp(aContext, 'status');
      this._colorProp(aContext, 'level');
      if ((aContext.name == null) && (this.name != null)) {
        aContext.name = this.name;
      }
      this._colorProp(aContext, 'name', 'blue');
      return TerminalLogger.__super__.formatter.apply(this, arguments);
    };

    TerminalLogger.prototype.inLevelContext = function(aContext) {
      var result, vLevel, vStatus;
      vStatus = aContext.status;
      if ((vStatus != null) && (aContext.level == null)) {
        vLevel = this.statusLevels[vStatus];
        if (vLevel == null) {
          vLevel = vStatus;
        }
        if (this.levelStr2Id(vLevel) != null) {
          aContext.level = vLevel;
        }
      }
      result = TerminalLogger.__super__.inLevelContext.call(this, aContext);
      return result;
    };

    defineProperty(TerminalLogger.prototype, '_colors');

    defineProperty(TerminalLogger.prototype, '_maxStatus');

    defineProperty(TerminalLogger.prototype, 'status');

    defineProperty(TerminalLogger.prototype, 'colors', void 0, {
      get: function() {
        return this._colors;
      },
      set: function(value) {
        return this.updateColors(value);
      }
    });

    TerminalLogger.prototype.getMaxLenInColors = function(aColors) {
      var result;
      if (aColors == null) {
        aColors = this._colors;
      }
      result = 0;
      getKeys(aColors).forEach(function(status) {
        if (status.length > result) {
          return result = status.length;
        }
      });
      return result;
    };

    TerminalLogger.prototype._clearStatus = function(aColors) {
      if (aColors == null) {
        aColors = this._colors;
      }
      this.status = function() {
        var aStatus, args, padding, vColor, vLN, vLevel, vStr;
        aStatus = arguments[0], args = 2 <= arguments.length ? __slice.call(arguments, 1) : [];
        aStatus = aStatus.toLowerCase();
        vLevel = this.statusLevels[aStatus];
        if (vLevel == null) {
          vLevel = aStatus;
        }
        vLevel = this.levelStr2Id(vLevel);
        if ((vLevel == null) || this.inLevel(vLevel)) {
          if (aColors) {
            vColor = aColors[aStatus];
          }
          vStr = format.apply(null, args);
          vLN = this.NEWLINE;
          padding = this.padding;
          if (vLN) {
            vStr = vStr.split(vLN).map(function(s) {
              var result;
              return result = s ? padding + s : s;
            }).join(vLN);
          }
          vStr = this.table({
            chars: noBorderTable,
            style: noPaddingTable,
            colAligns: ['right', 'left'],
            rows: [[textColor(vColor, pad(aStatus, this._maxStatus)), vStr]]
          });
          vStr += this.NEWLINE;
          this.write(vStr);
        }
        return this;
      };
      return this;
    };

    TerminalLogger.prototype.updateColors = function(aColors) {
      var that;
      if (isObject(aColors)) {
        this._colors = aColors;
        this._maxStatus = this.getMaxLenInColors(aColors);
        this._clearStatus(aColors);
        that = this;
        getKeys(aColors).forEach(function(status) {
          if (status !== 'name') {
            return that.status[status] = function() {
              var args;
              args = 1 <= arguments.length ? __slice.call(arguments, 0) : [];
              args.unshift(status);
              return that.status.apply(that, args);
            };
          }
        });
      }
      return this;
    };

    TerminalLogger.prototype._write = function(msg) {
      process.stderr.write(msg);
      return this;
    };

    TerminalLogger.prototype.tick = function() {
      var vColor, vText;
      vText = '✔';
      if (this.colors) {
        vColor = this.colors[vText];
      }
      if (vColor == null) {
        vColor = 'green';
      }
      this.write(this.padding + textColor(vColor, vText + ' ') + format.apply(null, arguments) + this.NEWLINE);
      return this;
    };

    TerminalLogger.prototype.cross = function() {
      var vColor, vText;
      vText = '✗';
      if (this.colors) {
        vColor = this.colors[vText];
      }
      if (vColor == null) {
        vColor = 'red';
      }
      this.write(this.padding + textColor(vColor, vText + ' ') + format.apply(null, arguments) + this.NEWLINE);
      return this;
    };

    TerminalLogger.prototype.up = function() {
      this.padding += this.step;
      return this;
    };

    TerminalLogger.prototype.down = function() {
      this.padding = this.padding.replace(this.step, '');
      return this;
    };

    TerminalLogger.prototype.table = function(aOptions) {
      var result, vRows;
      if (isArray(aOptions)) {
        vRows = aOptions;
        aOptions = null;
      } else if (aOptions) {
        vRows = aOptions.rows;
      }
      result = new Table(aOptions);
      if (isArray(vRows)) {
        vRows.forEach(function(row) {
          return result.push(row);
        });
      }
      return result.toString();
    };

    (function() {
      var id, k, _ref, _results;
      _ref = Logger.prototype.levels;
      _results = [];
      for (k in _ref) {
        id = _ref[k];
        if (id < 0) {
          continue;
        }
        k = k.toLowerCase();
        _results.push(TerminalLogger.prototype[k] = (function(k) {
          return function() {
            return this.status[k].apply(this, arguments);
          };
        })(k));
      }
      return _results;
    })();

    return TerminalLogger;

  })();

}).call(this);

//# sourceMappingURL=index.js.map
